There are several other data structures, like balanced trees and hash tables, 
which give us the possibility to search for a word in a dataset of strings. 
Then why do we need trie? Although hash table has O(1)time complexity for looking for a key,
 it is not efficient in the following operations :

Finding all keys with a common prefix.
Enumerating a dataset of strings in lexicographical order.
Another reason why trie outperforms hash table, is that as hash table increases in size, 
there are lots of hash collisions and the search time complexity could deteriorate to O(n), 
where n is the number of keys inserted. Trie could use less space compared to Hash Table when 
storing many keys with the same prefix. In this case using trie has only O(m)time complexity, 
where m is the key length. Searching for a key in a balanced tree costs O(mlogn) time complexity.

Application :
Autocomplete
spelling checker
ip route (longest prefix matching)
T9 predictive text - 9 -> which stands for Text on 9 keys, was used on phones to input texts during the late 1990s.
Solving word games